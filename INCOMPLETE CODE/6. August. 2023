import tkinter as tk
from tkinter import *
from tkinter.filedialog import asksaveasfile
import time 
#######################################################################

r = tk.Tk()
r.title('Referee Assistant Tool')
r.resizable(True, True)

def save_file():
    f = asksaveasfile(initialfile='Untitled.txt',
                      defaultextension=".txt",
                      filetypes=[("All Files", "*.*"), 
                                 ("Text Documents", "*.txt")])
###################################################################
menu = Menu(r)
r.config(menu=menu)
filemenu = Menu(menu)
newmenu = Menu(filemenu)
editmenu = Menu(menu)
savemenu = Menu(menu)
menu.add_cascade(label='File', menu=filemenu)
filemenu.add_cascade(label='New', menu=newmenu)
newmenu.add_command(label='Match Timer')

# this will be used to create a new reset window when the user wants a new window after using the previous one
################################################################
################################################################
filemenu.add_command(label='Open')

filemenu.add_command(label='Close', command=r.quit)

menu.add_cascade(label='Edit', menu=editmenu)

menu.add_command(label='Half Time')  # chuck another command that open a different file that allows you to change the timer for each half e.g. change from 45 minute halves to 40 minute for U17 games

menu.add_cascade(label='Save', menu=savemenu)

savemenu.add_cascade(label='Save As', command=save_file)

####################################################################

def home_score_change():
    Score_home["text"] +=1
    if Score_home["text"] == 99:
        Score_home["text"]= 0

home= Label(r,
            text = 'Home',font= ('Bondoni MT',50))
home.place(relx= 0.175, rely= 0.05, anchor = NW)

Score_home = Label(r,
                    text= 0, foreground='dark blue',
                      font=('Bondoni MT', 150))
Score_home.place(relx=0.2, rely=0.15, anchor = NW) 

goal_home = Button(r,
                    text="Goal",font =  ('Bondoni MT',15),
                    width= 10,command = home_score_change)
goal_home.place(relx=0.2, rely=0.45, anchor = W)

home_booking = Button(r,
                      text= "Booking", font=('Bondoni MT',15), width = 15, )
home_booking.place(relx = 0.2, rely = 0.5)

p1_name = tk.StringVar()
def open_home_team_sheet():
    htsw = tk.Tk()
    htsw.resizable(False,False)
    htsw.geometry("300x900")
    htsw.title("Home Team Sheet")
    p1=tk.Entry(htsw,textvariable = p1_name,font=('Bondoni MT',12))
    p1.grid(padx =0 , pady = 20)

 #def open_home_team_sheet():
    #home_team_sheet_window = Toplevel(r)
    #home_team_sheet_window.resizable(False,False)
    #home_team_sheet_window.geometry("300x900")
    
    #home_team_sheet_window.title("Home Team Sheet")
    #home_team_P1 = tk.Entry(r,font =('Bondoni MT',15) )
    #home_team_P1.grid(row = 1, column = 1)



home_team_sheet = Button(r,
                         text = "Team Sheet", font = ('Bondoni MT',15), width = 15,command = open_home_team_sheet)
home_team_sheet.place(relx = 0.2, rely = 0.55)
#################################################################

def away_score_change():
    score_away["text"] +=1
    if score_away["text"]==99:
        score_away["text"]=0

away = Label(r,
             text="Away",font = ('Bondoni MT',50))
away.place(relx = 0.8, rely = 0.05, anchor = NE)

score_away = Label(r,
                    text= 0 , foreground='red',
                    font=("Bondoni MT", 150))
score_away.place(relx=0.8, rely=0.15, anchor = NE)

goal_away = Button(r,
                    text="Goal", font = ('Bondoni MT',15),
                    width= 10,command = away_score_change)
goal_away.place(relx=0.8, rely=0.45, anchor = E)

###########################################################

def reset_screen():
    Score_home ["text"]=0
    score_away["text"]=0
    
reset_score = Button(r,
                     text = "Reset Score",
                     font = ('Segoe UI Semibolld',10),
                     command = reset_screen)
reset_score.place(relx = 0.5, rely= 0.85, anchor=S)

def start():
    global is_running
    global start_time
    if not is_running:
        is_running = True 
        start_time = time.time()
        update_time()


def stop():
    global is_running
    is_running = False

def update_time():
    if is_running:
        elapsed_time = time.time()-start_time
        extra_time.config(text = "{:000.2f}".format(elapsed_time))
        extra_time.after(50,update_time)

##############################################################################################

extra_time = Label(r,
                       text = "00.00", font = ("MS PGothic",35),
                       foreground = "dark green")
extra_time.place(relx = 0.5, rely = 0.3, anchor = CENTER)

extra_time_start = Button(r,
                         text = "Start", foreground = "dark green",
                         font = ("MS PGothic",20), command = start)
extra_time_start.place(relx = 0.44, rely = 0.46, anchor = CENTER)

extra_time_stop = Button(r,
                         text = "Stop",foreground = "dark green",
                         font = ("MS PGothic",20), command = stop)
extra_time_stop.place(relx = 0.55, rely = 0.46, anchor = CENTER)

##################################################################################################

def kickoff_button_split():
    kickoff_button["text"]= "Stop"
    kickoff_button["width"] = 5
    kickoff_button.place(relx =0.52, rely= 0.4, anchor = CENTER )
    start_kickoff_button_split = Button(r, text = "Start", width = 5, font = ('Bondoni MT',15))
    start_kickoff_button_split.place(relx =0.48, rely =0.4, anchor = CENTER)

kickoff_button = Button(r,
text="Kick-Off",font = ('Bondoni MT',15),
width = 15, command = kickoff_button_split )
kickoff_button.place(relx=0.495, rely=0.4, anchor=CENTER)

kickoff_button = Button(r,
                         text="Kick-Off",font = ('Bondoni MT',15),
                         width = 15)
kickoff_button.place(relx=0.495, rely=0.4, anchor=CENTER)


















#note to self create a dash line to seperate home and away scores using canvas, then after figure out the stopwatch formatting.


seperation_line = Canvas(r, width = 200, height = 100)
seperation_line.pack()

seperation_line.create_line(50,200,300,400, width = 5)
r.mainloop()
